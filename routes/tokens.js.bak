const { Router } = require("express");
const router = Router();

const jwt = require('jsonwebtoken');
const secret = 'KEQZOjws7PPb2pPoFIIn';

const notesDAO = require('../daos/note');
const note = require("../models/note");

router.use(async (req, res, next) => {
    console.log(`${req.method} ${req.url} at ${new Date()}`);
    next();
  });

router.use(async (req, res, next) => {
try {
    const AuthHeader = req.headers.authorization;
    if (AuthHeader) {
        if (typeof(AuthHeader !== 'undefined')){
        const auth = AuthHeader.split(' ');
        req.token = auth[1];
        }

        console.log('req.token = ' + req.token)
        req.tokenIsValid = jwt.verify(req.token, secret);
        if (req.tokenIsValid){
        const decoded = jwt.decode(req.token);

        req.payload = decoded;
        }
    }

    if (!req.token){
        throw new Error('Token is Invalid');
    }
    next();
} catch (e) {
    next(e);
}
});


router.post("/", async (req, res, next) => {
    const reqBody = req.body;
    const reqPayload = req.payload;
    
    try {
        console.log(reqBody);
        console.log(reqPayload);
        if (reqBody && reqPayload){
            const notedata = {text: reqBody.text, userId: reqPayload.userId};
            let newNote = await notesDAO.create(notedata);
            res.json(newNote); 
        } else {
            next();
        }
    } catch(e) {      
      next(e);
    }
  });

 router.get("/", async (req, res, next) => {
    try {
        const notes = await notesDAO.getByUserId(req.payload.userId);
        res.json(notes);
    } catch(e) {      
        next(e);
    }
});

router.get("/:id", async (req, res, next) => {
    try {
        const noteId = req.params.id;
        const note = await notesDAO.getById(noteId, req.payload.userId);
        if (!note) {
            throw new Error("Invalid note ID");
        }
        res.json(note);
    } catch(e) {      
        next(e);
    }
});

router.use(async (err, req, res, next) => {  
    console.log(err);
    if (err.message.includes("Cast to ObjectId failed")) {   
        res.status(400).send('Invalid id provided');  
    } else if (err.message.includes("Path `userId` is required") || err.message.includes("data and salt arguments required") || err.message.includes("userId is not defined")) {   
        res.status(400).send('User not found');
     } else if (err.message.includes("Invalid note ID")) {   
        res.status(404).send('Invalid note ID');
    } else if (err.message.includes("Path `text` is required.") || err.message.includes("Cannot read property 'text' of null")) {   
        res.status(401).send("Text is required"); 
    } else if (err.message.includes("Token is Invalid") || err.message.includes("malformed")) {   
        res.status(401).send("Token is Invalid");
    } else {    
        res.status(500).send('Something broke!')  
    }
    next(); 
  });

  
  module.exports = router;
  
  
